.showcase-wrapper {
    height: 95vh; /* Full-Screen height. */
    position: relative; /* This is needed in order to be able to position the 3 Dots that will give a hint to the user at which slide he currently is. */
    overflow: hidden;
}

.showcase-content{ /* Styling Flex-Container. */
    height: 100%; /* Take full-screen height. */
    width: 100%; /* Full-screen width. */
    display: flex;
    transition: all 0.5s ease;
}

.showcase { /* Styling Flex-Items (& Grid-Container). 
        --> KEY: The Flex-Items will also - simultaneously - be a Grid-Container!! */
    min-width: 100%; /* Each Flexbox-Item should have a FIXED 100% width, relative to the viewport (= borwser-fenster)!! */
    display: grid; /* Default-Behavior: All Grid-Items become 1 column. */
    place-items: center; /* This will be the vertical & horizontal alignment for our Grid-ITEMS WITHIN each CELL.

    - Key to note 1: Since the 'place-items' can only be applied to a Grid- OR Flexbox-CONTAINER, we can conclude that this property is applied to our GRID-Container (and not to the Flexbox that we used on the 'showcase-content'-div above).

    - Key to note 2: This is a Short-Cut-Writing for the following two Grid OR Flexbox CSS-properties: 
        - 'justify-items'-property (= horizontal alignment for Flexbox)
        - 'align-content'-property (= this is the vertical-alignment, since - by Default - we have a flex-direction of 'row' in this case.)
    */
    place-content: center; /* We horizontally & vertically alignment for the Flexbox- OR Grid-CONTENT. Dadurch nimmt - vor allem - der Button nicht dies gesamte Breite (= Width) der Grid-Cell an.

    - Key to note 1: Since the 'place-content' can only be applied to a Grid- OR Flexbox-CONTAINER, we can conclude that this property is applied to our GRID-Container (and not to the Flexbox that we used on the 'showcase-content'-div above). 
        - What it does? --> It will center - horizontally AND vertically - the WHOLE content of each column RELATIVE TO the whole height of the column (= e.g. both items WITHIN each of the 3 columns will be placed into the center of their corresponding grid-container). 

    - Key to note 2: This is a Short-Cut-Writing for the following two Flexbox- OR Grid- CSS-properties: 
        - 'justify-content'-property (= horizontal alignment WITHIN the flex- / grid-container)
        - 'align-content'-property (= this is the vertical-alignment WITHIN the flex- / grid-container.)
    */
    color: #fff;
    text-align: center;
}

.showcase h1 {
    font-size: min(76px, 10vw);
    width: min(600px, 90vw);
    margin: 1.5rem auto; /* Bringt mehr Luft zwischen Button & Titel. */
}

@media screen and (max-width: 340px){
    .showcase h1{
        font-size: min(2rem, 8vh);
    }
}

.showcase button {
    background: transparent;
    border: 2.5px solid #fff;
    color: #fff;
    font-family: inherit;
    text-transform: uppercase;
    padding: 0.8rem 1.4rem;
    outline: 0;
    cursor: pointer;
    transition: all 0.5s ease;
}

.showcase a {
    text-decoration: none;
}

.showcase button:hover {
    background: #acacac; /*for red: #fc5050*/
    color: #000;
}

/* - Background Images for Slider - */
/* .showcase:nth-child(1){
    background: linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.5)), url(../images/abkoppler-smoothspike-mk4.jpg) center/cover no-repeat;
} */

.border-wrapper {
    background-color: rgba(204,204,204, 0.65);
    padding: 15px;
    border-radius: 10px;
}

/* - Responsiveness of Slider - */
/* @media screen and (min-width: 375px){
    .showcase h1{
        font-size: 3rem;
    }
}

@media screen and (min-width: 485px){
    .showcase h1{
        font-size: 4rem;
    }
}

@media screen and (min-width: 992px){
    .showcase h1{
        font-size: 5rem;
    }
    .showcase button{
        font-size: 1.05rem;
    }
} */